"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var CachedHttp = require("./cached-http.js");
var QueryStore = require("./query-stores/query-store");

function Collection(_ref, component) {
	var collection = _ref.collection,
	    _ref$query_store_clas = _ref.query_store_class,
	    query_store_class = _ref$query_store_clas === undefined ? QueryStore.Stateful : _ref$query_store_clas,
	    _ref$get_forced_filte = _ref.get_forced_filter,
	    get_forced_filter = _ref$get_forced_filte === undefined ? function () {} : _ref$get_forced_filte,
	    _ref$get_forced_forma = _ref.get_forced_format,
	    get_forced_format = _ref$get_forced_forma === undefined ? function () {} : _ref$get_forced_forma,
	    _ref$get_forced_sort = _ref.get_forced_sort,
	    get_forced_sort = _ref$get_forced_sort === undefined ? function () {} : _ref$get_forced_sort;

	return function (_React$Component) {
		_inherits(Component, _React$Component);

		function Component() {
			_classCallCheck(this, Component);

			var _this = _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).call(this));

			_this.query_store = new query_store_class();
			_this.state = {
				loading: true,
				resources: [],
				response: { attachments: {}, items: [] }
			};
			return _this;
		}

		_createClass(Component, [{
			key: "componentDidMount",
			value: function componentDidMount() {
				var _this2 = this;

				this.refreshComponent();
				this.query_store.on("change", function () {
					return _this2.refreshComponent();
				});
			}
		}, {
			key: "componentDidUpdate",
			value: function componentDidUpdate(prevProps, prevState) {
				var serialized_last_filter = JSON.stringify(get_forced_filter(prevProps));
				var serialized_current_filter = JSON.stringify(get_forced_filter(this.props));
				if (serialized_last_filter !== serialized_current_filter) {
					this.refreshComponent();
				}
			}
		}, {
			key: "refreshComponent",
			value: function refreshComponent(options) {
				var _this3 = this;

				var default_options = {
					force: false,
					show_loading: true
				};

				var _Object$assign = Object.assign({}, default_options, options),
				    force = _Object$assign.force,
				    show_loading = _Object$assign.show_loading;

				if (force) CachedHttp.flush();
				if (show_loading) this.setState({ loading: true });
				CachedHttp.get("/api/v1/collections/" + collection, {
					filter: Object.assign({}, this.query_store.getQuery().filter, get_forced_filter(this.props)),
					format: get_forced_format(this.props),
					sort: Object.assign({}, this.query_store.getQuery().sort, get_forced_sort(this.props))
				}).then(function (response) {
					_this3.setState({
						response: response,
						resources: response.items,
						loading: false
					});
				});
			}
		}, {
			key: "render",
			value: function render() {
				return React.createElement(component, _extends({
					collection: collection,
					query_store: this.query_store
				}, this.state, {
					metadata: this.props.metadata,
					refresh: this.refreshComponent.bind(this)
				}));
			}
		}]);

		return Component;
	}(React.Component);
}

module.exports = Collection;