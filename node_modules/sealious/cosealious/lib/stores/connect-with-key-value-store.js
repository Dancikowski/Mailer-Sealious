"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var merge = require("merge");

module.exports = function (store, store_prop_name, component) {
	return function (_React$Component) {
		_inherits(_class, _React$Component);

		function _class(props) {
			_classCallCheck(this, _class);

			var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

			_this.state = _defineProperty({}, store_prop_name, {});
			return _this;
		}

		_createClass(_class, [{
			key: "componentDidMount",
			value: function componentDidMount() {
				var self = this;
				var listener = function listener(value) {
					self.setState(_defineProperty({}, store_prop_name, value));
				};
				store.on("change", listener);
				self.setState(_defineProperty({
					listener: listener
				}, store_prop_name, store.getStore()));
			}
		}, {
			key: "componentWillUnmount",
			value: function componentWillUnmount() {
				var self = this;
				(store.off || store.removeListener).bind(store)("change", self.state.listener);
			}
		}, {
			key: "render",
			value: function render() {
				return React.createElement(component, Object.assign({}, this.props, _defineProperty({}, store_prop_name, this.state[store_prop_name])));
			}
		}]);

		return _class;
	}(React.Component);
};