"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = require("react");
var EventEmitter = require("event-emitter");

var KeyValueStore = function () {
	function KeyValueStore(initial_values) {
		var _this = this;

		_classCallCheck(this, KeyValueStore);

		this.ee = new EventEmitter();
		this.values = initial_values || {};
		this.on = function (event, callback) {
			return _this.ee.on(event, callback);
		};
		this.off = function (event_name, listener) {
			return _this.ee.off(event_name, listener);
		};
	}

	_createClass(KeyValueStore, [{
		key: "set",
		value: function set(key, value) {
			var key_elements = key.split(".").reverse();
			var current_pointer = this.values;
			while (key_elements.length > 1) {
				var current_key = key_elements.pop();
				if (current_pointer[current_key] === undefined) {
					current_pointer[current_key] = {};
				}
				current_pointer = current_pointer[current_key];
			}
			current_pointer[key_elements.pop()] = value;
			this.ee.emit("change", this.values);
		}
	}, {
		key: "get",
		value: function get(key) {
			return this.values[key];
		}
	}, {
		key: "replaceStore",
		value: function replaceStore(values) {
			this.values = values;
			this.ee.emit("change", this.values);
		}
	}, {
		key: "getStore",
		value: function getStore() {
			return this.values;
		}
	}]);

	return KeyValueStore;
}();

module.exports = KeyValueStore;