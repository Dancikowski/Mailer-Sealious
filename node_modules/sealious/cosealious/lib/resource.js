"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require("react");
var SingleResourceAPI = require("./api/single-resource-api.js");

module.exports = function (_ref, component) {
	var collection = _ref.collection,
	    _ref$get_forced_filte = _ref.get_forced_filter,
	    get_forced_filter = _ref$get_forced_filte === undefined ? function () {} : _ref$get_forced_filte,
	    _ref$get_forced_forma = _ref.get_forced_format,
	    get_forced_format = _ref$get_forced_forma === undefined ? function () {} : _ref$get_forced_forma,
	    _ref$get_id = _ref.get_id,
	    get_id = _ref$get_id === undefined ? function (props) {
		return props.id;
	} : _ref$get_id,
	    _ref$resource_api_cla = _ref.resource_api_class,
	    resource_api_class = _ref$resource_api_cla === undefined ? SingleResourceAPI : _ref$resource_api_cla;
	return function (_React$Component) {
		_inherits(Resource, _React$Component);

		function Resource(props) {
			_classCallCheck(this, Resource);

			var _this = _possibleConstructorReturn(this, (Resource.__proto__ || Object.getPrototypeOf(Resource)).call(this, props));

			_this.state = {
				resourceAPI: null,
				resourceData: null
			};
			return _this;
		}

		_createClass(Resource, [{
			key: "componentDidMount",
			value: function componentDidMount() {
				var _this2 = this;

				var resourceAPI = new resource_api_class(collection, get_id(this.props), {
					filter: Object.assign({}, get_forced_filter(this.props)),
					format: get_forced_format(this.props)
				});
				this.setState({ resourceAPI: resourceAPI });
				resourceAPI.on("change", function (newData) {
					_this2.setState({ resourceData: newData });
				});
				resourceAPI.load();
			}
		}, {
			key: "componentWillUnmount",
			value: function componentWillUnmount() {
				if (this.state.resourceAPI !== null) {
					this.state.resourceAPI.removeAllListeners();
				}
			}
		}, {
			key: "isLoading",
			value: function isLoading() {
				return this.state.resourceAPI === null || this.state.resourceAPI.loading;
			}
		}, {
			key: "render",
			value: function render() {
				if (!get_id(this.props)) {
					throw Error("Please provide the resource id as an 'id' prop or provide the 'get_id' prop");
				}
				return React.createElement(component, Object.assign({}, this.props, {
					loading: this.isLoading(),
					resourceAPI: this.state.resourceAPI,
					resourceData: this.state.resourceData
				}));
			}
		}]);

		return Resource;
	}(React.Component);
};