"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require("events");

var QueryStore = function (_EventEmitter) {
	_inherits(QueryStore, _EventEmitter);

	function QueryStore() {
		_classCallCheck(this, QueryStore);

		return _possibleConstructorReturn(this, (QueryStore.__proto__ || Object.getPrototypeOf(QueryStore)).call(this));
	}

	_createClass(QueryStore, [{
		key: "init",
		value: function init() {
			var _this2 = this;

			this.store.set("sort", {});
			this.store.on("change", function () {
				return _this2.emit("change");
			});
		}
	}, {
		key: "setFilter",
		value: function setFilter(filter) {
			this.store.set("filter", filter);
			this.store.set("pagination.page", 1);
		}
	}, {
		key: "setSort",
		value: function setSort(sort) {
			this.store.set("sort", sort);
			this.store.set("pagination.page", 1);
		}
	}, {
		key: "getQuery",
		value: function getQuery() {
			return this.store.getStore();
		}
	}]);

	return QueryStore;
}(EventEmitter);

module.exports = QueryStore;

QueryStore.Stateful = require("./stateful-query-store.js");